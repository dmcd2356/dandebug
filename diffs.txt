diff --git a/src/debug/CallGraph.java b/src/debug/CallGraph.java
index 50c1169..0b6bcba 100644
--- a/src/debug/CallGraph.java
+++ b/src/debug/CallGraph.java
@@ -96,7 +96,9 @@ public class CallGraph {
               JOptionPane.showMessageDialog (null,
                   "Method:   " + selected.getFullName() + DebugMessage.NEWLINE +
                   "Count:    " + selected.getCount() + DebugMessage.NEWLINE +
-                  "Duration: " + selected.getDuration(),
+                  "Duration: " + selected.getDuration() + DebugMessage.NEWLINE +
+                  "1st call: " + selected.getFirstLine() + DebugMessage.NEWLINE +
+                  "last call:" + selected.getLastLine(),
                   "Method Info",
                   JOptionPane.INFORMATION_MESSAGE);
             }
@@ -124,8 +126,9 @@ public class CallGraph {
    * 
    * @param method - the full name of the method to add
    * @param parent - the full name of the caller
+   * @param line   - the line number corresponding to the call event
    */  
-  public static void callGraphAddMethod(String method, String parent) {
+  public static void callGraphAddMethod(String method, String parent, int line) {
     if (method == null || method.isEmpty() || CallGraph.graphMethList == null) {
       return;
     }
@@ -140,12 +143,12 @@ public class CallGraph {
     for (int ix = 0; ix < CallGraph.graphMethList.size(); ix++) {
       if (CallGraph.graphMethList.get(ix).getFullName().equals(method)) {
         mthNode = CallGraph.graphMethList.get(ix);
-        mthNode.incCount(); // inc # of times method called
+        mthNode.incCount(line); // inc # of times method called
       }
     }
     // if not found, create new one and add it to list
     if (mthNode == null) {
-      mthNode = new MethodInfo(method);
+      mthNode = new MethodInfo(method, line);
       CallGraph.graphMethList.add(mthNode);
       newnode = true;
     }
@@ -160,7 +163,7 @@ public class CallGraph {
         }
       }
       if (parNode == null) {
-        parNode = new MethodInfo(parent);
+        parNode = new MethodInfo(parent, -1);
         CallGraph.graphMethList.add(parNode);
         //System.out.println("AddParent: " + parNode.getClassAndMethod());
         CallGraph.callGraph.addVertex(parNode, parNode.getCGName());
diff --git a/src/debug/GuiPanel.java b/src/debug/GuiPanel.java
index 88547d8..8224f05 100644
--- a/src/debug/GuiPanel.java
+++ b/src/debug/GuiPanel.java
@@ -5,7 +5,6 @@
  */
 package debug;
 
-import com.mxgraph.swing.mxGraphComponent;
 import static debug.UDPComm.SERVER_PORT;
 import java.awt.Container;
 import java.awt.Dimension;
@@ -16,8 +15,6 @@ import java.awt.Insets;
 import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
 import java.io.File;
 import java.io.IOException;
 import javax.swing.BorderFactory;
@@ -29,7 +26,6 @@ import javax.swing.JFileChooser;
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JList;
-import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JRadioButton;
 import javax.swing.JScrollPane;
@@ -105,8 +101,10 @@ public class GuiPanel {
         "Pause");
     JButton saveTextButton = makeButton(GuiPanel.mainFrame, gbag, GuiPanel.Orient.LEFT, false,
         "Save Text");
-    JButton saveGrphButton = makeButton(GuiPanel.mainFrame, gbag, GuiPanel.Orient.LEFT, true,
+    JButton saveGrphButton = makeButton(GuiPanel.mainFrame, gbag, GuiPanel.Orient.LEFT, false,
         "Save Graph");
+    JButton loadFileButton = makeButton(GuiPanel.mainFrame, gbag, GuiPanel.Orient.LEFT, true,
+        "Load File");
 
     // add a tabbed panel to it
     GuiPanel.tabPanel = new JTabbedPane();
diff --git a/src/debug/MethodInfo.java b/src/debug/MethodInfo.java
index 2e9bdd3..1adde31 100644
--- a/src/debug/MethodInfo.java
+++ b/src/debug/MethodInfo.java
@@ -10,16 +10,18 @@ package debug;
  * @author dmcd2356
  */
 public class MethodInfo {
-  private String  fullName;
-  private String  className;
-  private String  methName;
-  private int     count;
-  private long    duration_ms;
-  private long    start_ref;
+  private String  fullName;       // full name of method (package, class, method + signature)
+  private String  className;      // class name (no package info or method name)
+  private String  methName;       // method name (no class info)
+  private int     count;          // number of time method called
+  private int     lineFirst;      // line number corresponding to 1st call to method
+  private int     lineLast;       // line number corresponding to last call to method
+  private long    duration_ms;    // total duration in method
+  private long    start_ref;      // timestamp when method last called
   
   private static final String NEWLINE = System.getProperty("line.separator");
 
-  public MethodInfo(String method) {
+  public MethodInfo(String method, int line) {
     fullName = className = methName = "";
     if (method != null && !method.isEmpty()) {
       // fullName should be untouched - it is used for comparisons
@@ -40,14 +42,17 @@ public class MethodInfo {
     }
 
     count = 1;
+    lineFirst = line;
+    lineLast = line;
     duration_ms = 0;
     start_ref = System.currentTimeMillis();
     //System.out.println("start time: " + start_ref + " (init) - " + fullName);
   }
   
-  public void incCount() {
+  public void incCount(int line) {
     ++count;
     start_ref = System.currentTimeMillis();
+    lineLast = line;
     //System.out.println("start time: " + start_ref + ", count " + count + " - " +  fullName);
   }
   
@@ -80,6 +85,14 @@ public class MethodInfo {
     return count;
   }
   
+  public int getFirstLine() {
+    return lineFirst;
+  }
+  
+  public int getLastLine() {
+    return lineLast;
+  }
+  
   public long getDuration() {
     return duration_ms;
   }
diff --git a/src/debug/ServerThread.java b/src/debug/ServerThread.java
index 8f2f244..ad44587 100644
--- a/src/debug/ServerThread.java
+++ b/src/debug/ServerThread.java
@@ -105,7 +105,7 @@ public class ServerThread extends Thread implements MyListener {
             if (offset > 0) {
               String method = content.substring(0, offset).trim();
               String parent = content.substring(offset + 1).trim();
-              CallGraph.callGraphAddMethod(method, parent);
+              CallGraph.callGraphAddMethod(method, parent, count);
             }
           }
           else if (typestr.equals("RETURN")) {
